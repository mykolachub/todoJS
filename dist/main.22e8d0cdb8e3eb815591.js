/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
eval("const _list = document.getElementById('list'); // on\r\nconst _notodo = document.getElementById('notodo'); // on\r\nconst _notodoCreate = document.getElementById('notodo-create'); // on\r\nconst _todo = document.getElementById('todo'); // off\r\nconst _todoCreate = document.getElementById('todo-create');\r\nconst _sheet = document.getElementById('sheet'); // off\r\nconst _sheetNewTask = document.getElementById('sheet-header-new');\r\nconst _sheetApply = document.getElementById('sheet-bar-apply');\r\n\r\nclass ToDo {\r\n    constructor() {\r\n        this.database = new Object(); // база данны где хранятся дела\r\n        this.todos = 0; // количество дел\r\n        this.containsTasks = false; // есть ли дела в списке\r\n    }\r\n\r\n    renderList() {\r\n        this.todos = Object.keys(this.database).length;\r\n        if (this.todos !== 0) {\r\n            _notodo.classList.remove('notodos--on');\r\n            _todo.classList.add('todos--on');\r\n\r\n            const last = Object.keys(app.database)[Object.keys(app.database).length - 1];\r\n            const list = _todo;\r\n            const item = document.createElement('div');\r\n            item.classList.add('todo__item');\r\n            item.innerHTML = `<div class=\"todo__content\">\r\n                                <div class=\"todo__name\">\r\n                                    <span>${app.database[last].name}</span>\r\n                                </div>\r\n                                <div class=\"todo__desc\">\r\n                                    <span>${app.database[last].description}</span>\r\n                                </div>\r\n                                <div class=\"todo__count\">\r\n                                    <span>${app.database[last].amount}</span>\r\n                                </div>\r\n                            </div>`;\r\n\r\n            list.insertBefore(item, _todoCreate);\r\n\r\n        } else {\r\n            _notodo.classList.add('notodos--on');\r\n            _todo.classList.remove('todos--on');\r\n        }\r\n    }\r\n\r\n    updateData() {\r\n        const hash = Date.now();\r\n        const _id = document.getElementById('sheet-bar-id');\r\n        const _namespace = document.getElementById('sheet-bar-name');\r\n        const _name = document.getElementById('sheet-header-name-input');\r\n        const _description = document.getElementById('sheet-header-disc-input');\r\n        const _tasks = document.querySelectorAll('.sheet__list_item');\r\n        \r\n        const tasksCollection = [];\r\n        _tasks.forEach(_task => {\r\n            tasksCollection.push({\r\n                task: _task.lastChild.value,\r\n                completed: _task.firstChild.control.checked\r\n            });\r\n        });\r\n        \r\n        // добавляю в базу новые данные\r\n        this.database[hash] = {\r\n            name: _name.value,\r\n            description: _description.value,\r\n            amount: _tasks.length,\r\n            tasks: tasksCollection\r\n        };\r\n    }\r\n\r\n    createTask() {\r\n        const template = `<label class=\"sheet__list_check\">\r\n                            <input class=\"sheet__list_input\" type=\"checkbox\">\r\n                            <span class=\"sheet__list_box\"></span>\r\n                        </label>\r\n                        <textarea placeholder=\"задание..\" name=\"\" rows=\"1\"></textarea>`;\r\n        const ul = document.getElementById('sheet-list');\r\n        const li = document.createElement('li');\r\n        li.classList.add('sheet__list_item');\r\n        li.innerHTML = template;\r\n\r\n        ul.appendChild(li);\r\n        this.containsTasks = true;\r\n    }\r\n\r\n    validateForms() {\r\n        const flags = [];\r\n        const forms = document.querySelectorAll('textarea');\r\n        // проверка только если есть формы дел\r\n        if (this.containsTasks) {\r\n            forms.forEach(form => {\r\n                const isEmpty = form.value.trim() !== '';\r\n                flags.push(isEmpty);\r\n            });\r\n            return !flags.includes(false);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// app initialisation\r\nconst app = new ToDo();\r\napp.renderList();\r\n\r\n_notodoCreate.addEventListener('click', () => {\r\n    console.log('submit');\r\n    _sheet.classList.add('sheet--on');\r\n})\r\n\r\n_sheetNewTask.addEventListener('click', () => {\r\n    app.createTask();\r\n    autosize(document.querySelectorAll('textarea'));\r\n})\r\n\r\n_sheetApply.addEventListener('click', () => {\r\n    const isValidate = app.validateForms();\r\n    if (isValidate) {\r\n        console.log('applied');\r\n        app.containsTasks = false;\r\n        app.updateData();\r\n        _sheet.classList.remove('sheet--on');\r\n        app.renderList();   \r\n    } else {\r\n        alert('Заполни все поля');\r\n    }\r\n});\r\n\r\n_todoCreate.addEventListener('click', () => {\r\n    console.log('creating..');\r\n    _sheet.classList.add('sheet--on');\r\n});\n\n//# sourceURL=webpack:///./main.js?");
/******/ })()
;