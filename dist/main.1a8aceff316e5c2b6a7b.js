/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
eval("const _list = document.getElementById('list'); // on\r\nconst _notodo = document.getElementById('notodo'); // on\r\nconst _notodoCreate = document.getElementById('notodo-create'); // on\r\nconst _todo = document.getElementById('todo'); // off\r\nconst _todoCreate = document.getElementById('todo-create');\r\nconst _sheet = document.getElementById('sheet'); // off\r\nconst _sheetName = document.getElementById('sheet-header-name-input'); // off\r\nconst _sheetNewTask = document.getElementById('sheet-header-new');\r\nconst _sheetApply = document.getElementById('sheet-bar-apply');\r\nconst _sheetClose = document.getElementById('sheet-bar-close');\r\n\r\nclass ToDo {\r\n    constructor() {\r\n        this.database = {}; // база данны где хранятся дела\r\n        this.todos = 0; // количество дел\r\n        this.containsTasks = false; // есть ли дела в списке\r\n    }\r\n\r\n    renderList() {\r\n        this.todos = Object.keys(this.database).length;\r\n        if (this.todos !== 0) {\r\n            _notodo.classList.remove('notodos--on');\r\n            _todo.classList.add('todos--on');\r\n\r\n            // удаляет старые записи. оставляет блок добавления записи\r\n            if (_todo.children.length) {\r\n                const toRemove = [];\r\n                for (const item of _todo.children) {\r\n                    const isTask = !item.classList.contains('todo__new');\r\n                    if (isTask) toRemove.push(item);\r\n                }\r\n                toRemove.forEach(item => _todo.removeChild(item));\r\n            }    \r\n\r\n            // перезаписывает записи в списке из базы\r\n            for (const hash in this.database) {\r\n                const task = this.database[hash];\r\n                const list = _todo;\r\n                const item = document.createElement('div');\r\n                item.classList.add('todo__item');\r\n                item.setAttribute('data-id', hash);\r\n                item.innerHTML = `<div data-id=\"${hash}\" class=\"todo__content\">\r\n                                    <div data-id=\"${hash}\"class=\"todo__name\">\r\n                                        <span data-id=\"${hash}\">${task.name}</span>\r\n                                    </div>\r\n                                    <div data-id=\"${hash}\"class=\"todo__desc\">\r\n                                        <span data-id=\"${hash}\">${task.description}</span>\r\n                                    </div>\r\n                                    <div data-id=\"${hash}\"class=\"todo__count\">\r\n                                        <span data-id=\"${hash}\">${task.amount}</span>\r\n                                    </div>\r\n                                </div>`;\r\n\r\n                list.insertBefore(item, _todoCreate);\r\n            }\r\n        } else {\r\n            _notodo.classList.add('notodos--on');\r\n            _todo.classList.remove('todos--on');\r\n        }\r\n    }\r\n\r\n    updateData() {\r\n        const hash = Date.now();\r\n        const _id = document.getElementById('sheet-bar-id');\r\n        const _namespace = document.getElementById('sheet-bar-name');\r\n        const _name = document.getElementById('sheet-header-name-input');\r\n        const _description = document.getElementById('sheet-header-disc-input');\r\n        const _tasks = document.querySelectorAll('.sheet__list_item');\r\n\r\n        // создаю массив объектов, которые содержат текст и статус \"дела\"\r\n        const tasksCollection = [];\r\n        _tasks.forEach(_task => {\r\n            tasksCollection.push({\r\n                task: _task.lastChild.value,\r\n                completed: _task.firstChild.control.checked\r\n            });\r\n        });\r\n\r\n        // добавляю в базу новый объект с данными\r\n        this.database[hash] = {\r\n            name: _name.value,\r\n            id: Object.keys(this.database).length + 1,\r\n            namespace: _name.value,\r\n            description: _description.value,\r\n            amount: _tasks.length,\r\n            tasks: tasksCollection\r\n        };\r\n\r\n        _id.textContent = Object.keys(this.database).length + 1;\r\n        _namespace.textContent = _name.value;\r\n\r\n        // обновляю localStorage\r\n        localStorage.setItem('todos', JSON.stringify(this.database));\r\n    }\r\n\r\n    createTask(task, completed) {\r\n        let template;\r\n\r\n        if (task) {\r\n            // если переданы аргументы в функцию, \"задания\" создаются по определенному шаблону\r\n            if (completed) {\r\n                template = `<label class=\"sheet__list_check\">\r\n                                <input class=\"sheet__list_input\" checked type=\"checkbox\">\r\n                                <span class=\"sheet__list_box\"></span>\r\n                            </label>\r\n                            <textarea placeholder=\"задание..\" name=\"\" rows=\"1\">${task}</textarea>`;    \r\n            } else {\r\n                template = `<label class=\"sheet__list_check\">\r\n                                <input class=\"sheet__list_input\" type=\"checkbox\">\r\n                                <span class=\"sheet__list_box\"></span>\r\n                            </label>\r\n                            <textarea placeholder=\"задание..\" name=\"\" rows=\"1\">${task}</textarea>`;    \r\n            }\r\n        } else {\r\n            // иначе, простой шаблон пустого \"задания\"\r\n            template = `<label class=\"sheet__list_check\">\r\n                            <input class=\"sheet__list_input\" type=\"checkbox\">\r\n                            <span class=\"sheet__list_box\"></span>\r\n                        </label>\r\n                        <textarea placeholder=\"задание..\" name=\"\" rows=\"1\"></textarea>`;\r\n        }\r\n        const ul = document.getElementById('sheet-list');\r\n        const li = document.createElement('li');\r\n        li.classList.add('sheet__list_item');\r\n        li.innerHTML = template;\r\n\r\n        ul.appendChild(li);\r\n        this.containsTasks = true;\r\n    }\r\n\r\n    validateForms() {\r\n        const flags = [];\r\n        const forms = document.querySelectorAll('textarea');\r\n\r\n        // проверка только если есть формы \"дел\"\r\n        if (this.containsTasks) {\r\n            forms.forEach(form => {\r\n                const isEmpty = form.value.trim() !== '';\r\n                flags.push(isEmpty);\r\n            });\r\n            return !flags.includes(false);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clearForms() {\r\n        const forms = document.querySelectorAll('textarea');\r\n        const sheetList = document.getElementById('sheet-list');\r\n        const _namespace = document.getElementById('sheet-bar-name');\r\n        _namespace.textContent = '';\r\n        forms.forEach(form => form.value = '');\r\n        if (sheetList.children.length) {\r\n            const toRemove = [];\r\n            for (const task of sheetList.children) {\r\n                toRemove.push(task);\r\n            }\r\n            toRemove.forEach(item => {\r\n                sheetList.removeChild(item);\r\n            });\r\n        }        \r\n    }\r\n\r\n    autosizeForms() {\r\n        const forms = document.querySelectorAll('textarea');\r\n        autosize(forms);\r\n    }\r\n\r\n    checkStorage() {\r\n        if (localStorage.getItem('todos') !== null) {\r\n            const raw = localStorage.getItem('todos');\r\n            app.database = JSON.parse(raw);\r\n        }\r\n    }\r\n\r\n    renderSheet(hash) {\r\n        const task = this.database[hash];\r\n        const _id = document.getElementById('sheet-bar-id');\r\n        const _namespace = document.getElementById('sheet-bar-name');\r\n        const _name = document.getElementById('sheet-header-name-input');\r\n        const _description = document.getElementById('sheet-header-disc-input');\r\n\r\n        _id.textContent = task.id;\r\n        _namespace.textContent = task.namespace;\r\n        _name.value = task.name;\r\n        _description.value = task.description;\r\n\r\n        for (const tasksCollection of task.tasks) {\r\n            const task = tasksCollection.task;\r\n            const completed = tasksCollection.completed;\r\n            this.createTask(task, completed);\r\n        }\r\n    }\r\n}\r\n\r\n// app initialisation\r\nconst app = new ToDo();\r\n\r\napp.checkStorage();\r\napp.renderList();\r\n\r\n// создают новую запись если еще их нет\r\n_notodoCreate.addEventListener('click', () => {\r\n    _sheet.classList.add('sheet--on');\r\n    _sheet.classList.remove('sheet--off');\r\n    app.clearForms();\r\n    app.autosizeForms();\r\n})\r\n\r\n// создает новое задание в записи\r\n_sheetNewTask.addEventListener('click', () => {\r\n    app.createTask();\r\n    app.autosizeForms();\r\n})\r\n\r\n// дублирует название записи для namespace\r\n_sheetName.addEventListener('input', () => {\r\n    const _namespace = document.getElementById('sheet-bar-name');\r\n    const value = _sheetName.value;\r\n    const validLength = 10;\r\n    if (value.length < validLength) _namespace.textContent = _sheetName.value;   \r\n})\r\n\r\n// применяет изменения и сохраняет запись\r\n_sheetApply.addEventListener('click', () => {\r\n    const isValidate = app.validateForms();\r\n    if (isValidate) {\r\n        app.updateData();\r\n        app.renderList();\r\n        _sheet.classList.remove('sheet--on');\r\n        _sheet.classList.add('sheet--off');\r\n    } else {\r\n        alert('Запись содержит пустые поля и/или не имеет заданий!');\r\n    }\r\n});\r\n\r\n// создает новую запись\r\n_todoCreate.addEventListener('click', () => {\r\n    console.log('creative mode');\r\n    app.clearForms();\r\n    app.autosizeForms();\r\n    _sheet.classList.add('sheet--on');\r\n    _sheet.classList.remove('sheet--off');\r\n});\r\n\r\n// закрывает форму без изменений в базе при нажатии на кнопку \"закрыть\"\r\n_sheetClose.addEventListener('click', () => {\r\n    app.clearForms();\r\n    _sheet.classList.remove('sheet--on');\r\n    _sheet.classList.add('sheet--off');\r\n});\r\n\r\n// закрывает форму без изменений в базе при нажатии вне\r\n_sheet.addEventListener('click', (e) => {\r\n    const isOut = e.target.className === \"sheet__wrapper\";\r\n    if (isOut) {\r\n        app.clearForms();\r\n        _sheet.classList.remove('sheet--on');\r\n        _sheet.classList.add('sheet--off');\r\n    }\r\n})\r\n\r\n// изменение существующей записи\r\ndocument.addEventListener('click', (e) => {\r\n    const target = e.target;\r\n\r\n    // слушает только те элементы которые получили data-id т.е. только записи\r\n    if (target.hasAttribute('data-id')) {\r\n        // console.log('editing mode');\r\n        const hash = target.getAttribute('data-id');  \r\n        app.clearForms();\r\n        app.renderSheet(hash);\r\n        app.autosizeForms();\r\n        _sheet.classList.add('sheet--on');\r\n        _sheet.classList.remove('sheet--off');\r\n    }\r\n});\n\n//# sourceURL=webpack:///./main.js?");
/******/ })()
;